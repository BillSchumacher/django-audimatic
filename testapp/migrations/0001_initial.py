# Generated by Django 4.2.4 on 2023-09-02 06:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations
import testapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAuditTrail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('before', django.contrib.postgres.fields.hstore.HStoreField()),
                ('after', django.contrib.postgres.fields.hstore.HStoreField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'audit_table': testapp.models.UserAuditTrail,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='customuser',
            trigger=pgtrigger.compiler.Trigger(name='track_history_create', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n    INSERT INTO testapp_useraudittrail(before, after)\n        SELECT hstore(old), hstore(new);\n    RETURN new;\n', hash='ae8638ede3eeabe979e5e9f0c6a22a11874cc9dd', operation='INSERT', pgid='pgtrigger_track_history_create_54cee', table='testapp_customuser', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='customuser',
            trigger=pgtrigger.compiler.Trigger(name='track_history_update', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n    INSERT INTO testapp_useraudittrail(before, after)\n        SELECT hstore(old), hstore(new);\n    RETURN new;\n', hash='741990c94a8594b73f00ca2f222b6953a7064671', operation='UPDATE', pgid='pgtrigger_track_history_update_f7583', table='testapp_customuser', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='customuser',
            trigger=pgtrigger.compiler.Trigger(name='track_history_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n    INSERT INTO testapp_useraudittrail(before, after)\n        SELECT hstore(old), hstore(new);\n    RETURN new;\n', hash='478b6e2629b988ab0743fe725acdc395d923b2dd', operation='DELETE', pgid='pgtrigger_track_history_delete_5ef81', table='testapp_customuser', when='AFTER')),
        ),
    ]
